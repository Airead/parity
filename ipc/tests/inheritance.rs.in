// Copyright 2015, 2016 Ethcore (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

use ipc::IpcConfig;

pub trait Proto {
	fn proto(&self, p1: u64) -> bool;
}

#[ipc]
pub trait Derive : Proto {
	fn derive(&self, p1: u64, p2: u64) -> bool;
}

impl IpcConfig for Derive {}

#[test]
fn can_call_derive() {
	use devtools::TestSocket;

	let mut socket = TestSocket::new();
	socket.read_buffer = vec![1];
	let client = DeriveClient::init(socket);

	client.derive(99, 77);

	assert_eq!(vec![
		0, 17,
		0, 0, 0, 0, 0, 0, 0, 0,
		16, 0, 0, 0, 0, 0, 0, 0,
		99, 0, 0, 0, 0, 0, 0, 0,
		77, 0, 0, 0, 0, 0, 0, 0],
		client.socket().write().unwrap().write_buffer.clone());
}

#[test]
fn can_call_proto() {
	use devtools::TestSocket;

	let mut socket = TestSocket::new();
	socket.read_buffer = vec![1];
	let client = DeriveClient::init(socket);

	client.proto(99);

	assert_eq!(vec![
		0, 16,
		0, 0, 0, 0, 0, 0, 0, 0,
		8, 0, 0, 0, 0, 0, 0, 0,
		99, 0, 0, 0, 0, 0, 0, 0],
		client.socket().write().unwrap().write_buffer.clone());
}

